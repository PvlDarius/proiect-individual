/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package library;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Date;
import javax.swing.JOptionPane;
import java.util.List;
import java.util.ArrayList;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;

/**
 *
 * @author Darius
 */
public class IssueBook extends javax.swing.JFrame {

    /**
     * Creates new form IssueBook
     */
    public IssueBook() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        bookDetailsPanel = new javax.swing.JPanel();
        backHome = new javax.swing.JButton();
        bookDetailsLabel = new javax.swing.JLabel();
        bookTitleEmptyLabel = new javax.swing.JLabel();
        bookAuthorEmptyLabel = new javax.swing.JLabel();
        numberOfPagesEmptyLabel = new javax.swing.JLabel();
        genreEmptyLabel = new javax.swing.JLabel();
        publisherEmptyLabel = new javax.swing.JLabel();
        yearOfReleaseEmptyLabel = new javax.swing.JLabel();
        quantityEmptyLabel = new javax.swing.JLabel();
        bookErrorLabel = new javax.swing.JLabel();
        bookIdList = new javax.swing.JComboBox<>();
        bookIdLabel = new javax.swing.JLabel();
        bookTitleLabel = new javax.swing.JLabel();
        bookAuthorLabel = new javax.swing.JLabel();
        numberOfPagesLabel = new javax.swing.JLabel();
        genreLabel = new javax.swing.JLabel();
        publisherLabel = new javax.swing.JLabel();
        yearOfReleaseLabel = new javax.swing.JLabel();
        quantityLabel = new javax.swing.JLabel();
        readerDetailPanel = new javax.swing.JPanel();
        readerDetailsLabel = new javax.swing.JLabel();
        firstNameEmptyLabel = new javax.swing.JLabel();
        lastNameEmptyLabel = new javax.swing.JLabel();
        phoneNumberEmptyLabel = new javax.swing.JLabel();
        ageEmptyLabel = new javax.swing.JLabel();
        registrationDateEmptyLabel = new javax.swing.JLabel();
        readerErrorLabel = new javax.swing.JLabel();
        readerIdList = new javax.swing.JComboBox<>();
        idLabel = new javax.swing.JLabel();
        firstNameLabel = new javax.swing.JLabel();
        lastNameLabel = new javax.swing.JLabel();
        lastNameLabel1 = new javax.swing.JLabel();
        phoneNumberLabel = new javax.swing.JLabel();
        ageLabel = new javax.swing.JLabel();
        registrationDateLabel = new javax.swing.JLabel();
        emailEmptyLabel = new javax.swing.JLabel();
        closeButton = new javax.swing.JButton();
        issueBookLabel = new javax.swing.JLabel();
        issueBookIdLabel = new javax.swing.JLabel();
        issueReaderIdLabel = new javax.swing.JLabel();
        issueBookIdField = new javax.swing.JTextField();
        issueReaderIdField = new javax.swing.JTextField();
        issueDateLabel = new javax.swing.JLabel();
        issueDateChooser = new com.toedter.calendar.JDateChooser();
        dueDateLabel = new javax.swing.JLabel();
        dueDateChooser = new com.toedter.calendar.JDateChooser();
        issueBookButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        mainPanel.setBackground(new java.awt.Color(234, 253, 248));

        bookDetailsPanel.setBackground(new java.awt.Color(22, 105, 122));

        backHome.setBackground(new java.awt.Color(72, 159, 181));
        backHome.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        backHome.setForeground(new java.awt.Color(0, 0, 0));
        backHome.setText("Back Home");
        backHome.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backHomeMouseClicked(evt);
            }
        });

        bookDetailsLabel.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        bookDetailsLabel.setForeground(new java.awt.Color(234, 253, 248));
        bookDetailsLabel.setText("Book Details");

        bookTitleEmptyLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        bookTitleEmptyLabel.setForeground(new java.awt.Color(234, 253, 248));

        bookAuthorEmptyLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        bookAuthorEmptyLabel.setForeground(new java.awt.Color(234, 253, 248));

        numberOfPagesEmptyLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        numberOfPagesEmptyLabel.setForeground(new java.awt.Color(234, 253, 248));

        genreEmptyLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        genreEmptyLabel.setForeground(new java.awt.Color(234, 253, 248));

        publisherEmptyLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        publisherEmptyLabel.setForeground(new java.awt.Color(234, 253, 248));

        yearOfReleaseEmptyLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        yearOfReleaseEmptyLabel.setForeground(new java.awt.Color(234, 253, 248));

        quantityEmptyLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        quantityEmptyLabel.setForeground(new java.awt.Color(234, 253, 248));

        bookErrorLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        bookErrorLabel.setForeground(new java.awt.Color(241, 211, 2));

        bookIdList.setModel(new DefaultComboBoxModel<String>(getBookIDs().toArray(new String[0])));
        bookIdList.setSelectedIndex(0);
        bookIdList.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                bookIdListFocusLost(evt);
            }
        });
        bookIdList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookIdListActionPerformed(evt);
            }
        });

        bookIdLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        bookIdLabel.setForeground(new java.awt.Color(234, 253, 248));
        bookIdLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-book-30.png"))); // NOI18N
        bookIdLabel.setText("Book ID:");

        bookTitleLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        bookTitleLabel.setForeground(new java.awt.Color(234, 253, 248));
        bookTitleLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-title-32.png"))); // NOI18N
        bookTitleLabel.setText("Book Title:");

        bookAuthorLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        bookAuthorLabel.setForeground(new java.awt.Color(234, 253, 248));
        bookAuthorLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-document-writer-30.png"))); // NOI18N
        bookAuthorLabel.setText("Book Author:");

        numberOfPagesLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        numberOfPagesLabel.setForeground(new java.awt.Color(234, 253, 248));
        numberOfPagesLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-open-book-30.png"))); // NOI18N
        numberOfPagesLabel.setText("Number of Pages:");

        genreLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        genreLabel.setForeground(new java.awt.Color(234, 253, 248));
        genreLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-diversity-24.png"))); // NOI18N
        genreLabel.setText("Genre:");

        publisherLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        publisherLabel.setForeground(new java.awt.Color(234, 253, 248));
        publisherLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-printer-30.png"))); // NOI18N
        publisherLabel.setText("Publisher:");

        yearOfReleaseLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        yearOfReleaseLabel.setForeground(new java.awt.Color(234, 253, 248));
        yearOfReleaseLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-calendar-30.png"))); // NOI18N
        yearOfReleaseLabel.setText("Year:");

        quantityLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        quantityLabel.setForeground(new java.awt.Color(234, 253, 248));
        quantityLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-boxes-30.png"))); // NOI18N
        quantityLabel.setText("Quantity:");

        javax.swing.GroupLayout bookDetailsPanelLayout = new javax.swing.GroupLayout(bookDetailsPanel);
        bookDetailsPanel.setLayout(bookDetailsPanelLayout);
        bookDetailsPanelLayout.setHorizontalGroup(
            bookDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bookDetailsPanelLayout.createSequentialGroup()
                .addGroup(bookDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bookDetailsPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(bookDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(bookDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bookDetailsPanelLayout.createSequentialGroup()
                                    .addComponent(bookAuthorLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(bookAuthorEmptyLabel))
                                .addGroup(bookDetailsPanelLayout.createSequentialGroup()
                                    .addComponent(bookTitleLabel)
                                    .addGap(12, 12, 12)
                                    .addComponent(bookTitleEmptyLabel))
                                .addGroup(bookDetailsPanelLayout.createSequentialGroup()
                                    .addComponent(yearOfReleaseLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(yearOfReleaseEmptyLabel)))
                            .addGroup(bookDetailsPanelLayout.createSequentialGroup()
                                .addComponent(quantityLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(quantityEmptyLabel))
                            .addGroup(bookDetailsPanelLayout.createSequentialGroup()
                                .addComponent(genreLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(genreEmptyLabel))
                            .addGroup(bookDetailsPanelLayout.createSequentialGroup()
                                .addComponent(publisherLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(publisherEmptyLabel))
                            .addGroup(bookDetailsPanelLayout.createSequentialGroup()
                                .addComponent(numberOfPagesLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(numberOfPagesEmptyLabel))
                            .addComponent(bookErrorLabel)
                            .addComponent(backHome)
                            .addGroup(bookDetailsPanelLayout.createSequentialGroup()
                                .addComponent(bookIdLabel)
                                .addGap(18, 18, 18)
                                .addComponent(bookIdList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(bookDetailsPanelLayout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addComponent(bookDetailsLabel)))
                .addGap(82, 82, 82))
        );
        bookDetailsPanelLayout.setVerticalGroup(
            bookDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bookDetailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backHome)
                .addGap(18, 18, 18)
                .addComponent(bookDetailsLabel)
                .addGap(47, 47, 47)
                .addGroup(bookDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bookIdLabel)
                    .addComponent(bookIdList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(bookDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bookTitleLabel)
                    .addComponent(bookTitleEmptyLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(bookDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bookAuthorLabel)
                    .addComponent(bookAuthorEmptyLabel))
                .addGap(18, 18, 18)
                .addGroup(bookDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numberOfPagesLabel)
                    .addComponent(numberOfPagesEmptyLabel))
                .addGap(18, 18, 18)
                .addGroup(bookDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(genreLabel)
                    .addComponent(genreEmptyLabel))
                .addGap(18, 18, 18)
                .addGroup(bookDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(publisherLabel)
                    .addComponent(publisherEmptyLabel))
                .addGap(18, 18, 18)
                .addGroup(bookDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(yearOfReleaseLabel)
                    .addComponent(yearOfReleaseEmptyLabel))
                .addGap(18, 18, 18)
                .addGroup(bookDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(quantityLabel)
                    .addComponent(quantityEmptyLabel))
                .addGap(67, 67, 67)
                .addComponent(bookErrorLabel)
                .addContainerGap(47, Short.MAX_VALUE))
        );

        readerDetailPanel.setBackground(new java.awt.Color(72, 159, 181));
        readerDetailPanel.setPreferredSize(new java.awt.Dimension(300, 600));

        readerDetailsLabel.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        readerDetailsLabel.setForeground(new java.awt.Color(234, 253, 248));
        readerDetailsLabel.setText("Reader Details");

        firstNameEmptyLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        firstNameEmptyLabel.setForeground(new java.awt.Color(234, 253, 248));

        lastNameEmptyLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        lastNameEmptyLabel.setForeground(new java.awt.Color(234, 253, 248));

        phoneNumberEmptyLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        phoneNumberEmptyLabel.setForeground(new java.awt.Color(234, 253, 248));

        ageEmptyLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        ageEmptyLabel.setForeground(new java.awt.Color(234, 253, 248));

        registrationDateEmptyLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        registrationDateEmptyLabel.setForeground(new java.awt.Color(234, 253, 248));

        readerErrorLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        readerErrorLabel.setForeground(new java.awt.Color(241, 211, 2));

        readerIdList.setModel(new DefaultComboBoxModel<String>(getReaderIDs().toArray(new String[0])));
        readerIdList.setSelectedIndex(0);
        readerIdList.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                readerIdListFocusLost(evt);
            }
        });
        readerIdList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readerIdListActionPerformed(evt);
            }
        });

        idLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        idLabel.setForeground(new java.awt.Color(234, 253, 248));
        idLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-user-30.png"))); // NOI18N
        idLabel.setText("Reader's ID:");

        firstNameLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        firstNameLabel.setForeground(new java.awt.Color(234, 253, 248));
        firstNameLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-badge-30.png"))); // NOI18N
        firstNameLabel.setText("First Name:");

        lastNameLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        lastNameLabel.setForeground(new java.awt.Color(234, 253, 248));
        lastNameLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-badge-30.png"))); // NOI18N
        lastNameLabel.setText("Last Name:");

        lastNameLabel1.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        lastNameLabel1.setForeground(new java.awt.Color(234, 253, 248));
        lastNameLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-secured-letter2-30.png"))); // NOI18N
        lastNameLabel1.setText("E-Mail:");

        phoneNumberLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        phoneNumberLabel.setForeground(new java.awt.Color(234, 253, 248));
        phoneNumberLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-phone-30.png"))); // NOI18N
        phoneNumberLabel.setText("Phone Number:");

        ageLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        ageLabel.setForeground(new java.awt.Color(234, 253, 248));
        ageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-age-timeline-30.png"))); // NOI18N
        ageLabel.setText("Reader's Age:");

        registrationDateLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        registrationDateLabel.setForeground(new java.awt.Color(234, 253, 248));
        registrationDateLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-calendar-30.png"))); // NOI18N
        registrationDateLabel.setText("Registration Date:");

        emailEmptyLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        emailEmptyLabel.setForeground(new java.awt.Color(234, 253, 248));

        javax.swing.GroupLayout readerDetailPanelLayout = new javax.swing.GroupLayout(readerDetailPanel);
        readerDetailPanel.setLayout(readerDetailPanelLayout);
        readerDetailPanelLayout.setHorizontalGroup(
            readerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(readerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(readerDetailPanelLayout.createSequentialGroup()
                    .addGap(8, 8, 8)
                    .addGroup(readerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, readerDetailPanelLayout.createSequentialGroup()
                            .addComponent(lastNameLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(emailEmptyLabel))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, readerDetailPanelLayout.createSequentialGroup()
                            .addComponent(lastNameLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lastNameEmptyLabel)))
                    .addContainerGap())
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, readerDetailPanelLayout.createSequentialGroup()
                    .addContainerGap(11, Short.MAX_VALUE)
                    .addComponent(phoneNumberLabel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(phoneNumberEmptyLabel)
                    .addContainerGap(131, Short.MAX_VALUE)))
            .addGroup(readerDetailPanelLayout.createSequentialGroup()
                .addGroup(readerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(readerDetailPanelLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(readerErrorLabel))
                    .addGroup(readerDetailPanelLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(readerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(readerDetailPanelLayout.createSequentialGroup()
                                .addComponent(idLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(readerIdList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(readerDetailPanelLayout.createSequentialGroup()
                                .addComponent(registrationDateLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(registrationDateEmptyLabel))
                            .addGroup(readerDetailPanelLayout.createSequentialGroup()
                                .addComponent(firstNameLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(firstNameEmptyLabel))
                            .addGroup(readerDetailPanelLayout.createSequentialGroup()
                                .addComponent(ageLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ageEmptyLabel))))
                    .addGroup(readerDetailPanelLayout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(readerDetailsLabel)))
                .addGap(46, 46, 46))
        );
        readerDetailPanelLayout.setVerticalGroup(
            readerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(readerDetailPanelLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(readerDetailsLabel)
                .addGap(52, 52, 52)
                .addGroup(readerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idLabel)
                    .addComponent(readerIdList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(readerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstNameLabel)
                    .addComponent(firstNameEmptyLabel))
                .addGap(18, 18, 18)
                .addGroup(readerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lastNameLabel)
                    .addComponent(lastNameEmptyLabel))
                .addGap(18, 18, 18)
                .addGroup(readerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lastNameLabel1)
                    .addComponent(emailEmptyLabel))
                .addGap(18, 18, 18)
                .addGroup(readerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(phoneNumberLabel)
                    .addComponent(phoneNumberEmptyLabel))
                .addGap(18, 18, 18)
                .addGroup(readerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ageLabel)
                    .addComponent(ageEmptyLabel))
                .addGap(18, 18, 18)
                .addGroup(readerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(registrationDateLabel)
                    .addComponent(registrationDateEmptyLabel))
                .addGap(51, 51, 51)
                .addComponent(readerErrorLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        closeButton.setBackground(new java.awt.Color(72, 159, 181));
        closeButton.setForeground(new java.awt.Color(0, 0, 0));
        closeButton.setText("X");
        closeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeButtonMouseClicked(evt);
            }
        });
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        issueBookLabel.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        issueBookLabel.setForeground(new java.awt.Color(0, 0, 0));
        issueBookLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-give-book-64.png"))); // NOI18N
        issueBookLabel.setText("Issue Book");

        issueBookIdLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        issueBookIdLabel.setForeground(new java.awt.Color(0, 0, 0));
        issueBookIdLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-book2-30.png"))); // NOI18N
        issueBookIdLabel.setText("Book ID:");

        issueReaderIdLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        issueReaderIdLabel.setForeground(new java.awt.Color(0, 0, 0));
        issueReaderIdLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-user2-30.png"))); // NOI18N
        issueReaderIdLabel.setText("Reader ID:");

        issueBookIdField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                issueBookIdFieldFocusLost(evt);
            }
        });
        issueBookIdField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                issueBookIdFieldActionPerformed(evt);
            }
        });

        issueReaderIdField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                issueReaderIdFieldFocusLost(evt);
            }
        });
        issueReaderIdField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                issueReaderIdFieldActionPerformed(evt);
            }
        });

        issueDateLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        issueDateLabel.setForeground(new java.awt.Color(0, 0, 0));
        issueDateLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-calendar2-30.png"))); // NOI18N
        issueDateLabel.setText("Issue Date:");

        dueDateLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        dueDateLabel.setForeground(new java.awt.Color(0, 0, 0));
        dueDateLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-calendar2-30.png"))); // NOI18N
        dueDateLabel.setText("Due Date:");

        issueBookButton.setBackground(new java.awt.Color(72, 159, 181));
        issueBookButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        issueBookButton.setForeground(new java.awt.Color(234, 253, 248));
        issueBookButton.setText("Issue Book");
        issueBookButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                issueBookButtonMouseClicked(evt);
            }
        });
        issueBookButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                issueBookButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(bookDetailsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(readerDetailPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(issueBookLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 167, Short.MAX_VALUE)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(dueDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(issueBookIdField, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(issueReaderIdField, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(issueDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(12, 12, 12))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                                .addComponent(issueBookButton)
                                .addGap(38, 38, 38)))
                        .addGap(115, 115, 115))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(closeButton)
                        .addContainerGap())
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(issueReaderIdLabel)
                            .addComponent(issueBookIdLabel)
                            .addComponent(issueDateLabel)
                            .addComponent(dueDateLabel))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bookDetailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(readerDetailPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(closeButton)
                .addGap(18, 18, 18)
                .addComponent(issueBookLabel)
                .addGap(18, 18, 18)
                .addComponent(issueBookIdLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(issueBookIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(issueReaderIdLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(issueReaderIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(issueDateLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(issueDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dueDateLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dueDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57)
                .addComponent(issueBookButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>                        

    private List<String> getBookIDs(){
        List<String> list = new ArrayList<>();
        try{
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/biblioteca", "root", "");
            PreparedStatement pst = con.prepareStatement("SELECT id_carte FROM carti");
            ResultSet rs = pst.executeQuery();
            while(rs.next()){
                list.add(rs.getString(1));
            }
        }
        catch(Exception e){
            e.printStackTrace();
        } 
        return list;
    }
    
    private List<String> getReaderIDs(){
        List<String> list = new ArrayList<>();
        try{
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/biblioteca", "root", "");
            PreparedStatement pst = con.prepareStatement("SELECT id_cititor FROM cititori");
            ResultSet rs = pst.executeQuery();
            while(rs.next()){
                list.add(rs.getString(1));
            }
        }
        catch(Exception e){
            e.printStackTrace();
        } 
        return list;
    }
    
    private void backHomeMouseClicked(java.awt.event.MouseEvent evt) {                                      
        // TODO add your handling code here:
        HomePage home = new HomePage();
        home.setVisible(true);
        dispose();
    }                                     

    private void closeButtonMouseClicked(java.awt.event.MouseEvent evt) {                                         
        System.exit(0);
    }                                        

    private void issueReaderIdFieldActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        // TODO add your handling code here:
    }                                                  
    
    public void updateBookCount(){
        int bookId = Integer.parseInt(issueBookIdField.getText());
        try{
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/biblioteca", "root", "");
            PreparedStatement pst = con.prepareStatement("UPDATE carti SET cantitate = cantitate - 1 WHERE id_carte = ?"); 
            pst.setInt(1, bookId);
            int rowCount = pst.executeUpdate();
            if(rowCount > 0){
                JOptionPane.showMessageDialog(this, "Book count updated succesfully!");
                int initialCount = Integer.parseInt(quantityEmptyLabel.getText());
                quantityEmptyLabel.setText(Integer.toString(initialCount - 1));
            }
            else{
                JOptionPane.showMessageDialog(this, "Error: Book count was not updated!");
            }
        }
        catch(Exception e){
            e.printStackTrace();
        }
    }
    
    public boolean bookAlreadyIssued(){
        boolean alreadyIssued = false;
        int bookId = Integer.parseInt(issueBookIdField.getText());
        int readerId = Integer.parseInt(issueReaderIdField.getText());
        try{
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/biblioteca", "root", "");
            PreparedStatement pst = con.prepareStatement("SELECT * FROM imprumuturi WHERE id_carte = ? AND id_cititor = ? AND status = 'Pending'");
            pst.setInt(1, bookId);            
            pst.setInt(2, readerId);
            ResultSet rs = pst.executeQuery();
            if(rs.next())
                alreadyIssued = true;
            else
                alreadyIssued = false;
        }
        catch(Exception e){
            e.printStackTrace();
        }
        return alreadyIssued;
    }
    
    private void issueBookButtonMouseClicked(java.awt.event.MouseEvent evt) {                                             
        if(getBookDetails() != false && getReaderDetails() != false){
            if(quantityEmptyLabel.getText().equals("0")){
                JOptionPane.showMessageDialog(this, "This book is not available!");
            }
            else{
                if(bookAlreadyIssued() == false){
                    boolean isIssued = false;
                    int bookId = Integer.parseInt(issueBookIdField.getText());
                    String bookTitle = bookTitleEmptyLabel.getText();
                    int readerId = Integer.parseInt(issueReaderIdField.getText());
                    String readerFirstName = firstNameEmptyLabel.getText();        
                    String readerLastName = lastNameEmptyLabel.getText();
                    Date issueDate = issueDateChooser.getDate();        
                    Date dueDate = dueDateChooser.getDate();
                    java.sql.Date inputIssueDate = new java.sql.Date(issueDate.getTime());        
                    java.sql.Date inputDueDate = new java.sql.Date(dueDate.getTime());

                    try{
                        if(inputDueDate.before(inputIssueDate)){
                            JOptionPane.showMessageDialog(this, "Can not issue book because due date is smaller than issue date");
                        }
                        else{
                            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/biblioteca", "root", "");
                            PreparedStatement pst = con.prepareStatement("INSERT INTO imprumuturi VALUES (default,?,?,?,?,?,?,?,?)"); 
                            pst.setInt(1, bookId);
                            pst.setString(2, bookTitle);
                            pst.setInt(3, readerId);
                            pst.setString(4, readerFirstName);            
                            pst.setString(5, readerLastName);
                            pst.setDate(6, inputIssueDate);
                            pst.setDate(7, inputDueDate);
                            pst.setString(8, "Pending");

                            int rowCount = pst.executeUpdate();
                            if(rowCount > 0)
                                isIssued = true;
                            else
                                isIssued = false;
                        }
                    }
                    catch(Exception e){
                        e.printStackTrace();
                    }
                    if(isIssued == true){
                        JOptionPane.showMessageDialog(this, "Book issued succesfully!");
                        updateBookCount();
                    }    
                    else{
                        JOptionPane.showMessageDialog(this, "Error: Book was not issued!");
                    }
                }
                else{
                    JOptionPane.showMessageDialog(this, "This reader already has this book!");
                }
            }
        }
        else{
            JOptionPane.showMessageDialog(this, "Invalid action!");
        }
    }                                            

    private void issueBookButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                
        // TODO add your handling code here:
    }                                               

    private void issueBookIdFieldFocusLost(java.awt.event.FocusEvent evt) {                                           
        if(!issueBookIdField.getText().equals(""))
            getBookDetails();
    }                                          

    private void issueReaderIdFieldFocusLost(java.awt.event.FocusEvent evt) {                                             
        if(!issueReaderIdField.getText().equals(""))
            getReaderDetails();
    }                                            

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void bookIdListFocusLost(java.awt.event.FocusEvent evt) {                                     
        if(!bookIdList.getSelectedItem().equals("")){
            issueBookIdField.setText(bookIdList.getSelectedItem().toString());
            getBookDetails();
        }
    }                                    

    private void bookIdListActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          

    private void issueBookIdFieldActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        // TODO add your handling code here:
    }                                                

    private void readerIdListActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
    }                                            

    private void readerIdListFocusLost(java.awt.event.FocusEvent evt) {                                       
        if(!readerIdList.getSelectedItem().equals("")){
            issueReaderIdField.setText(readerIdList.getSelectedItem().toString());
            getReaderDetails();
        }
    }                                      
    
    public boolean getBookDetails(){
        int bookId = Integer.parseInt(issueBookIdField.getText());
        boolean canIssue = false;
        try{
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/biblioteca", "root", "");
            PreparedStatement pst = con.prepareStatement("SELECT * FROM carti WHERE id_carte = ?");
            pst.setInt(1, bookId);
            ResultSet rs = pst.executeQuery();
            
            if(rs.next()){
                bookIdList.setSelectedItem(rs.getString("id_carte"));                
                bookTitleEmptyLabel.setText(rs.getString("titlu"));
                bookAuthorEmptyLabel.setText(rs.getString("autor"));
                numberOfPagesEmptyLabel.setText(rs.getString("nr_pagini"));                
                genreEmptyLabel.setText(rs.getString("gen"));
                publisherEmptyLabel.setText(rs.getString("editura"));
                yearOfReleaseEmptyLabel.setText(rs.getString("an_aparitie"));
                quantityEmptyLabel.setText(rs.getString("cantitate"));
                canIssue = true;
            }
            else{             
                bookTitleEmptyLabel.setText("");
                bookAuthorEmptyLabel.setText("");
                numberOfPagesEmptyLabel.setText("");                
                genreEmptyLabel.setText("");
                publisherEmptyLabel.setText("");
                yearOfReleaseEmptyLabel.setText("");
                quantityEmptyLabel.setText("");
                bookErrorLabel.setText("Error: Invalid book ID!");
                canIssue = false;
            }
        }
        catch(Exception e){
            e.printStackTrace();
        }
        return canIssue;
    }
    
    public boolean getReaderDetails(){
        int readerId = Integer.parseInt(issueReaderIdField.getText());
        boolean canIssue = false;
        try{
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/biblioteca", "root", "");
            PreparedStatement pst = con.prepareStatement("SELECT * FROM cititori WHERE id_cititor = ?");
            pst.setInt(1, readerId);
            ResultSet rs = pst.executeQuery();
            
            if(rs.next()){
                readerIdList.setSelectedItem(rs.getString("id_cititor"));                
                firstNameEmptyLabel.setText(rs.getString("prenume"));
                lastNameEmptyLabel.setText(rs.getString("nume"));
                emailEmptyLabel.setText(rs.getString("email"));
                phoneNumberEmptyLabel.setText(rs.getString("telefon"));                
                ageEmptyLabel.setText(rs.getString("varsta"));
                registrationDateEmptyLabel.setText(rs.getString("data_inregistrarii"));
                canIssue = true;
            }
            else{             
                firstNameEmptyLabel.setText("");
                lastNameEmptyLabel.setText("");
                emailEmptyLabel.setText("");
                phoneNumberEmptyLabel.setText("");                
                ageEmptyLabel.setText("");
                registrationDateEmptyLabel.setText("");
                readerErrorLabel.setText("Error: Invalid reader ID!");
                canIssue = false;
            }
        }
        catch(Exception e){
            e.printStackTrace();
        }
        return canIssue;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IssueBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IssueBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IssueBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IssueBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IssueBook().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JLabel ageEmptyLabel;
    private javax.swing.JLabel ageLabel;
    private javax.swing.JButton backHome;
    private javax.swing.JLabel bookAuthorEmptyLabel;
    private javax.swing.JLabel bookAuthorLabel;
    private javax.swing.JLabel bookDetailsLabel;
    private javax.swing.JPanel bookDetailsPanel;
    private javax.swing.JLabel bookErrorLabel;
    private javax.swing.JLabel bookIdLabel;
    private javax.swing.JComboBox<String> bookIdList;
    private javax.swing.JLabel bookTitleEmptyLabel;
    private javax.swing.JLabel bookTitleLabel;
    private javax.swing.JButton closeButton;
    private com.toedter.calendar.JDateChooser dueDateChooser;
    private javax.swing.JLabel dueDateLabel;
    private javax.swing.JLabel emailEmptyLabel;
    private javax.swing.JLabel firstNameEmptyLabel;
    private javax.swing.JLabel firstNameLabel;
    private javax.swing.JLabel genreEmptyLabel;
    private javax.swing.JLabel genreLabel;
    private javax.swing.JLabel idLabel;
    private javax.swing.JButton issueBookButton;
    private javax.swing.JTextField issueBookIdField;
    private javax.swing.JLabel issueBookIdLabel;
    private javax.swing.JLabel issueBookLabel;
    private com.toedter.calendar.JDateChooser issueDateChooser;
    private javax.swing.JLabel issueDateLabel;
    private javax.swing.JTextField issueReaderIdField;
    private javax.swing.JLabel issueReaderIdLabel;
    private javax.swing.JLabel lastNameEmptyLabel;
    private javax.swing.JLabel lastNameLabel;
    private javax.swing.JLabel lastNameLabel1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JLabel numberOfPagesEmptyLabel;
    private javax.swing.JLabel numberOfPagesLabel;
    private javax.swing.JLabel phoneNumberEmptyLabel;
    private javax.swing.JLabel phoneNumberLabel;
    private javax.swing.JLabel publisherEmptyLabel;
    private javax.swing.JLabel publisherLabel;
    private javax.swing.JLabel quantityEmptyLabel;
    private javax.swing.JLabel quantityLabel;
    private javax.swing.JPanel readerDetailPanel;
    private javax.swing.JLabel readerDetailsLabel;
    private javax.swing.JLabel readerErrorLabel;
    private javax.swing.JComboBox<String> readerIdList;
    private javax.swing.JLabel registrationDateEmptyLabel;
    private javax.swing.JLabel registrationDateLabel;
    private javax.swing.JLabel yearOfReleaseEmptyLabel;
    private javax.swing.JLabel yearOfReleaseLabel;
    // End of variables declaration                   
}
